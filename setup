#!/usr/local/bin/python3.11

# This script should take a user from the bsdinstall (which sets up a minimal 
# operating system that is not ready to be used as a personal computer in the 
# modern day) to an MVP desktop environment.
#
# There is no login manager. After the user logs in via tty, `startx` is ran 
# bringing them to i3.
# 
# Currently runs on just 400 MB of ram. Compare to the original value of 6.5 GB 
# of ram "wasted" on Wired Memory.
# 

import asyncio
import os
import sys
from pprint import pprint

global config

PACKAGE_FILE="freebsd.packages"
RC_CONF     = "/etc/rc.conf"
SYSCTL_CONF = "/etc/sysctl.conf"
FSTAB       = "/etc/fstab"

# The desired options
class Config:
    graphics_driver: str  = "intel"
    reduce_memory  : bool = False
    enable_exfatfs : bool = False
    linux_enable   : bool = False
    mount_proc     : bool = False
    setup_ports    : bool = False
    doas           : bool = False
    add_skriptlins_to_path     : bool = False

    
    # Requires GUI
    external_monitor: bool = False



    def debug(self):
        pprint(self.__dict__)

config = Config()
def main():
    if User.is_super_user():
        Prompt.system_config()
        System.install_packages()
        Configure.system()
        System.reboot()
    else:
        Prompt.i3()
        Configure.i3()

class Prompt:

    @staticmethod
    def system_config() -> None:
        global config

        config.graphics_driver = Prompt.graphics_driver()
        config.reduce_memory   = Prompt.reduce_memory()
        config.mount_proc      = Prompt.mount_proc()
        config.setup_ports     = Prompt.setup_ports()
        config.linux_enable    = Prompt.linux_enable()
        config.add_skriptlins_to_path = Prompt.add_skriptlins_to_path()

        todo("ask user if they would like to enable automount.")

        print()

    @staticmethod
    def i3() -> None:
        global config
        
        config.external_monitor= Prompt.external_monitor()
        
        return None
            

    @staticmethod
    def external_monitor() -> bool:
        regex = '"HDMI|DP|VGA"'
        monitors = int(System.run(f"xrandr --listactivemonitors | grep -E {regex} | wc -l").strip())
        if monitors == 0:
            return False

        prompt = "Would you like to setup your external monitors?"
        return Prompt.yes_no_loop(prompt)

    @staticmethod
    def add_skriptlins_to_path():
        prompt = "Would you like to add the 'skriptlins' directory to your path?"
        return Prompt.yes_no_loop(prompt)

    @staticmethod
    def linux_enable():
        prompt = "Would you like to enable Linux compatability?"
        return Prompt.yes_no_loop(prompt)

    @staticmethod
    def graphics_driver() -> str:
        prompt = "Choose a graphics driver."
        return Prompt.choice_loop(prompt, 
                               "[Intel|amd|nvidia]", 
                               ["intel", "amd", "nvidia", ""], 
                               "intel")
    @staticmethod
    def setup_ports():
        prompt = "Would you like to setup ports?"
        return Prompt.yes_no_loop(prompt)

    @staticmethod
    def mount_proc() -> bool:
        prompt = "Would you mount 'proc'? This is used by some " \
              "Linux applications such as Gnome and KDE."
        return Prompt.yes_no_loop(prompt)

    @staticmethod
    def reduce_memory() -> bool:
        prompt = "Would you like to reduce the amount of memory FreeBSD " \
              "Allocates by default?"
        return Prompt.yes_no_loop(prompt, "n")

    # ------ Helpers
    @staticmethod
    def yes_no_loop(prompt: str, default: str = "y") -> bool:
        box = "[Y/n]"
        if default == "n": box = "[y/N]"
        prompt = f"{prompt} {box}: "
        return bool(Prompt.loop(prompt, ["y", "n", ""], default))

    @staticmethod
    def choice_loop(prompt: str, box: str, choices: list[str], default: str) -> str:
        prompt = f"{prompt} {box}: "
        return str(Prompt.loop(prompt, choices, default))

    @staticmethod
    def loop(prompt: str, valid_answers: list[str], default_answer: str) -> bool | str:
        while True:
            choice: str = input(prompt).lower()
            if choice == "": choice = default_answer

            if choice not in valid_answers:
                print(f"Invalid Choice: {choice}.")
                err_msg = f"Please choose one of the following: {valid_answers}."
                System.notify("p", err_msg)
                continue


            if choice == "y"  : return True
            elif choice == "n": return False
            elif choice == "" : return default_answer

            return choice


# The code to actually configure the user's
# desired options.
class Configure:

    @staticmethod
    def i3() -> None:
        """NO ROOT"""
        System.print("Configuring i3")
        
        # Copy config over
        System.copy_i3_config()

        # startx in .profile
        Configure.start_x_after_login()

        # enable doas
        Configure.doas()
        # setup .xinitrc
        Configure.xinitrc()
        Configure.git_ssh_keygen()

        System.system(f"doas -u {User.get_name()} startx")
        if config.external_monitor       : Configure.external_monitor()


    @staticmethod
    def git_ssh_keygen() -> None:

        EMAIL = input("git.user.email: ")
        NAME  = input("git.user.name: ")
        System.system(f"git config --global user.name \"{NAME}\"")
        System.system(f"git config --global user.email \"{EMAIL}\"")
        #git config --global user.name NAME
        #git config --global user.email EMAIL
        System.system(f"ssh-keygen -t ed25519 -C \"{EMAIL}\"")

        return None



    @staticmethod
    def system() -> None:
        """ROOT"""
        global config
        System.notify("c", "Configuring the system based on user inputs.")

        if config.graphics_driver        : Configure.graphics_driver()
        if config.reduce_memory          : Configure.reduce_memory()
        if config.mount_proc             : Configure.mount_proc()
        if config.setup_ports            : Configure.setup_ports()
        #if config.add_skriptlins_to_path : Configure.add_skriptlins_to_path()

        Configure.start_x_after_login()
        Configure.xinitrc()


        todo("setup mount.exfat for mounting vfat usb sticks.")
        todo("enable automount.")

        todo("enable linux compatability: chapter 12.")
        # Config Files
        todo(".config files: Rofi, i3")
        todo("setup i3 to use better applications. Rofi/Firefox/Terminal")

        # To be able to watch youtube videos for example.
        todo("enable pulseaudio.")

            


        return None



    @staticmethod
    def doas() -> None:
        """ROOT"""
        System.system("echo permit :wheel >> /usr/local/etc/doas.conf")

    
    @staticmethod
    def graphics_driver() -> None:
        """ROOT"""
        global config
        INTEL_MODULE: str = "i915kms"

        graphics_driver = config.graphics_driver
        System.notify("c", f"Configuring video driver for '{graphics_driver}'.")

        
        value: list[str] | None = Conf.get_value(RC_CONF, "kld_list")

        msg = f"Skipping: Not enabling '{INTEL_MODULE}' kernel module: 'load_list+=\"{INTEL_MODULE}\"' already in '/etc/rc.conf'."
        if value:
            System.notify("c", msg)
            return

        System.system(f"pkg install drm-kmod")
        System.system(f"kldload {INTEL_MODULE}")
        System.kld_list_add(INTEL_MODULE)
        return None

    @staticmethod
    def reduce_memory() -> None: 
        """ROOT"""
        global config

        vfs_maxbufspace: str = "vfs.maxbufspace"
        msg = f"Skipping: Not reducing memory. '{vfs_maxbufspace}' is already configured."
        if Conf.key_exists(SYSCTL_CONF, vfs_maxbufspace):
            System.notify("c", msg)
            return None

        System.run("./skriptlins/tune-memory-wired")
        return None

    @staticmethod
    def mount_proc() -> None:
        """ROOT"""
        line = "proc            /proc           procfs  rw      0       0"
        cmd  = f"echo \"{line}\" >> {FSTAB}"

        if Conf.contains_exact_line(FSTAB, line):
            System.notify("c", f"Skipping: Not mounting proc. A proc entry already exists in '{FSTAB}'.")
            return None

        System.run(f"{cmd}")
        return None

    @staticmethod
    def enable_exfatfs() -> None:
        """ROOT"""
        global config
        todo("configure exfat support.")
        return None

    @staticmethod
    def linux_compatability():
        """ROOT"""
        global config
        todo("configure linux compatability.")
        return None

    @staticmethod
    def setup_ports() -> bool:
        """ROOT"""

        ports_dir = "/usr/ports"
        if os.path.exists(ports_dir):
            System.notify("c", f"Skipping: Not setting up ports. Directory already exists: '{ports_dir}'.")
            return False

        System.run("git clone https://git.freebsd.org/ports.git /usr/ports")
        todo("install a port manager.")
        return True



    @staticmethod
    def external_monitor() -> None:
        """NO ROOT"""
        # We've already asked them if they want to set this up.
        
        # Display active monitors
        # monitors: list[str]= Ask which on they would like to select (need function to get)
        # monitors = list(map(remove_junk_chars, res))
        
        output: str = System.run("xrandr --listactivemonitors")
        System.print(output)
        
        monitors: list[str] = [ 
            # Just the VGA-1 etc. The .lower()
            # is required by the choice_loop.
            x.split(" ")[-1].strip().lower()
            # For every line after the first.
            for x in output.strip().split("\n")[1:]
        ]

        box: str = f"[{'|'.join(monitors)}]"
        monitor_choice: str = Prompt.choice_loop(
            "Which monitor would you like to enable?",
            box,
            monitors,
            monitors[0]
        ).upper()
        System.print(f"You Chose: {monitor_choice}")
        
        
        # TODO(tyler): I could have it do the prompt loop where the predicate is whether or not the
        # input string follows the correct regex.
        laptop_dimensions: str = System.input("Laptop screen dimensions? E.g. 1600x900")
        monitor_dimensions: str = System.input("Monitor dimensions? E.g 1920x1080")
        
        valid_answers = ["left", "right", ""]
        relative_position: str = Prompt.choice_loop(
            "Monitor relative position?", 
            "[LEFT|right]",
            valid_answers,
            default = valid_answers[0]
        )
        
        laptop_settings =f"--output LVDS-1 "             \
                         f"--mode {laptop_dimensions} "  \
                         f"--pos 1600x0 "                \
                         "--rotate normal "
                         
        monitor_settings =f"--output {monitor_choice} "                  \
                               "--primary "                            \
                               f"--mode  {monitor_dimensions}"         \
                               f"--pos 0x0 "                           \
                               "--rotate normal "                      \
                               f"{relative_position}"
        
        
        cmd = f"xrandr {laptop_settings} "     \
              f"{monitor_settings} "
              #"--output HDMI-1 --off "     \
              #"--output DP-1   --off "     \
              #"--output HDMI-2 --off "     \
              #"--output HDMI-3 --off "     \
              #"--output DP-2   --off "     \
              #"--output DP-3   --off "

        screenlayout_dir = User.get_home() + "/.screenlayout"
        screenlayout_path = f"{screenlayout_dir}/default.sh"
        if os.path.isdir(screenlayout_dir) is False:
            os.mkdir(screenlayout_dir)
            System.notify("c", f"Created directory for xrandr config: '{screen_layout_dir}'")
        if os.path.isfile(screenlayout_path):
            overwrite: str = Prompt.yes_no_loop(
                "Looks like there is already a xrandr config on this machine. Would you like to overwrite it?",
                default = "y"
            )
            if overwrite:
                System.notify("c", f"Overwriting {screenlayout_path}.")
                System.file_append(screenlayout_path, cmd)
            else:
                System.notify(f"c", "Skipping: Not overwriting '{screenlayout_path}'.")
        
        return None

    @staticmethod
    def add_skriptlins_to_path():
        """NO ROOT"""
        skriptlins            = "skriptlins"
        skriptlins_source_dir = "./{skriptlins}"

        from glob import glob
        skriptlins_source: list[str] = glob(f"{skriptlins_source_dir}/*")

        #skriptlins_source = f"./{skriptlins}"
        # Only command I know that will get you the name of the user who
        # ran `doas` is `users`.
        user_home: str = User.get_home()
        skriptlins_dst    = f"{user_home}/.local/bin/{skriptlins}"

        bashrc_path = f"{user_home}/.bashrc"


        def contains_skriptlin_export(file_path: str, cmd: str) -> bool:
            return Conf.contains_exact_line(file_path, cmd)

        def copy_skriptlins_to_local_bin():
            if os.path.exists(skriptlins_dst):
                System.notify("c", f"Skipping: Not copying skriptlins over to '{skriptlins_dst}'. Directory already exists.")
                return

            System.run(f"cp -R {skriptlins_source} {skriptlins_dst}")
            return

        def __add_skriptlins_to_path():
            PATH: list[str] = os.environ["PATH"]
            CMD: str = f"echo export PATH=\$PATH:{skriptlins_dst} >> {bashrc_path}"
            # Geez...
            export_cmd: str = " ".join(CMD.split()[1:3]).replace("\\", "")

            if contains_skriptlin_export(bashrc_path, export_cmd):
                System.notify("c", f"Skipping: Not exporting skriptlins path: '{export_cmd}' is already in '{bashrc_path}'.")
                return

            # Took me a second to figure out why the whole path was being piped
            # to the .bashrc.
            System.run(CMD)
            return


        copy_skriptlins_to_local_bin()
        __add_skriptlins_to_path()
        return

    @staticmethod
    def start_x_after_login():
        """NO ROOT"""
        home_dir = User.get_home()
        profile = f"{home_dir}/.profile"

        System.notify("c", f"Configuring '{profile}' to start up Xor immediately after you log in.")

        if Conf.contains_exact_line(profile, "startx"):
            System.notify("c", "Skipping: Not configuring the system to start Xorg after logging in: Already configured.")
            return None

        script = """
    if [ -z "$DISPLAY" ] && [ "$(tty)" = "/dev/ttyv0" ];then
        startx
    fi
    """
        System.file_append(profile, script)
        
        #System.print("RAN: cat ./snippets/{script_name} ./skriptlins/xorg-start-after-login")
        return None

    @staticmethod
    def xinitrc() -> None:
        """NO ROOT"""
        xinitrc_personal =  f"{User.get_home()}/.xinitrc"

        # NOTE: Here's I'm defining custom keyboard options. 
        # TODO(tyler): This could be a global variable that is easier to configure.

        pulse_audio = "pulseaudio --start"
        swap_caps_with_escape = "setxkbmap -option caps:swapescape"

        # Should be last command in the /etc/rc.conf file.
        exec_i3 = "exec i3"

        Conf.append_line(xinitrc_personal, pulse_audio)
        Conf.append_line(xinitrc_personal, swap_caps_with_escape)
        Conf.append_line(xinitrc_personal, exec_i3)
        
        # Copy the xinitrc we have stashed away in snippets to the
        # global xinitrc.
        # This effectively just removes TMW from the picture.
        global_xinitrc = "/usr/local/etc/X11/xinit/xinitrc"
        System.run(f"rm {global_xinitrc}")
        System.run(f"ln {User.get_home()}/.xinitrc {global_xinitrc}")

        return None



class Conf:
    @staticmethod
    def kld_module_exists(kld_module: str) -> bool:
        kld_list: list[str] | None = Conf.get_value(RC_CONF, "kld_list")
        if not kld_list:
            return False

        return kld_module in kld_list

    @staticmethod
    def key_exists(conf_path: str, needle_key) -> bool:
        def fn(haystack_key: str):
            return needle_key == haystack_key

        return Conf.search(conf_path, fn)[0]

    @staticmethod
    def get_value(conf_path: str, needle_key: str) -> list[str] | None:
        def fn(haystack_key: str):
            return needle_key == haystack_key

        return Conf.search(conf_path, fn)[1]


    @staticmethod
    def search(conf_path: str, condition_fn) -> tuple[bool, list[str] | None]:
        conf: list[str] = System.read_file(conf_path)

        for line in conf:
            conf_sp: list[str] = line.split("=")
            if len(conf_sp) != 2:
                continue
            haystack_key, value = conf_sp
            if condition_fn(haystack_key):
                return (True, Conf.value_from(value))

        return (False, None)

    @staticmethod
    def contains_exact_line(file_path: str, line: str) -> bool:
        file_contents: list[str] = System.read_file(file_path)
        for _line in file_contents:
            if _line.strip() == line:
                return True
        return False


    @staticmethod
    def append_line(conf_path: str, line: str) -> bool:
        if os.path.exists(conf_path) is False:
            System.run(f"touch {conf_path}")
        if Conf.contains_exact_line(conf_path, line):
            System.notify("c", f"Skipping: Not adding '{line}' to '{conf_path}': Already configured.")
            return False

        System.file_append(conf_path, line)
        return True

    @staticmethod
    def value_from(raw_string: str) -> list[str]:
        return [ value.replace("\"", "") for value in raw_string.split(" ") ]

class User:

    @staticmethod
    def ensure_super_user() -> None:
        return User.is_super_user()

    @staticmethod
    def is_super_user() -> bool:
        return int(os.getuid()) == 0

    @staticmethod
    def get_name() -> str:
        return os.popen("users").read().strip()

    @staticmethod
    def get_home() -> str:
        user: str = User.get_name()
        return f"/home/{user}"


flush = sys.stdout.flush

# Code section to get/set/display system information/commands
class System:
    @staticmethod
    # TODO(tyler): Would be nice if this returned (exit_code, string)
    def run(cmd) -> str:
        print(cmd)
        return os.popen(cmd).read()
    
    def system(cmd) -> object:
        print(cmd)
        return os.system(cmd)


    @staticmethod
    def error(msg) -> None:
        print(msg)
        exit(1)

    @staticmethod
    def reboot():
        System.print("FAKING: reboot")
        #System.run("reboot)
        #os.system("reboot")

    @staticmethod
    def install_packages():
        # This values are sort of magic. Look at the very bottom of this file
        # for an `exec()` line. That's where these are comming from.
        assert os.path.exists("freebsd.packages")
        assert minimal_packages is not None
        assert extra_packages is not None

        minimal_pkgs = " ".join(list(minimal_packages))
        extra_pkgs  = " ".join(list(extra_packages))

        System.print("Installing packages. Will take some time...")
        cmd = f"pkg install -y {minimal_pkgs} {extra_pkgs}"
        System.system(cmd)
        return None


    @staticmethod
    def print(msg):
        print(msg)
        flush()

    @staticmethod
    def notify(stage: str, msg: str) -> None:
        philter: dict[str, str] = {
                "c": "configure",
                "p": "prompt",
                "t": "TODO"
        }
        assert stage in philter.keys()

        expanded_stage: str = philter[stage]
        System.print(f"[{expanded_stage}] {msg}")
        
    @staticmethod
    def input(prompt: str) -> object:
        return input(f"[INPUT]: {prompt}: ")

    
    @staticmethod
    def read_file_to_string(path: str) -> str:
        f = open(path)
        c = f.read()
        f.close()

        return c

    @staticmethod
    def read_file(path: str) -> list[str]:
        return System.read_file_to_string(path).split("\n")

    @staticmethod
    def kld_list_add(val: str) -> None:
        System.run(f"sysrc kld_list+={val}")

    @staticmethod
    def file_append(file_path: str, to_append: str, newline: bool = True) -> None:
        System.notify("c", f"Appending to '{file_path}':\n{to_append}")
        assert os.path.exists(file_path)

        f = open(file_path, "a")
        if newline: f.write(f"\n{to_append}\n")
        else      : f.write(to_append)
        f.close()

        return None
    

    @staticmethod
    def copy_i3_config() -> None:
        i3_conf_dir  = f"{User.get_home()}/.config/i3"
        i3_conf_path = f"{i3_conf_dir}/config"
        if os.path.isdir(i3_conf_dir) is False:
            System.run(f"mkdir {i3_conf_dir}")

        System.run(f"cp ./snippets/config-i3 {i3_conf_path}")
        return None

def todo(msg):
    System.notify("t", msg)


if __name__ == "__main__":
    # Magic [TODO(explain)]
    exec(System.read_file_to_string(PACKAGE_FILE))
    main()
    # Configure.system()
    #System.install_packages()
    #Configure.i3()
    #Configure.doas()
    #Configure.graphics_driver()
    #Configure.reduce_memory()
    #Configure.mount_proc()
    #Configure.setup_ports()
    #Configure.add_skriptlins_to_path()
