#!/usr/local/bin/python3


# This script should take a user from the bsdinstall (which
# sets up a minimal operating system that is not ready to
# be used as a personal computer in the modern day) to 
# an MVP desktop environment.
#
# There is no login manager. After the user logs in via tty,
# `startx` is ran bringing them to i3.
# 
# Currently runs on just 400 MB of ram. Compare to the original
# value of 6.5 GB of ram "wasted" on Wired Memory.

import os
import sys
from pprint import pprint


class Config:
    graphics_driver: str  = "intel"
    reduce_memory  : bool = False
    mount_proc     : bool = False
    setup_xfat     : bool = False
    setup_ports    : bool = False
    linux_enable   : bool = False

    def debug(self):
        pprint(self.__dict__)


global config
config = Config()


def main():
    ensure_super_user()
    todo("check if user has internet. If not, set it up for them.")

    configuration_prompts()
    install_packages()
    configure()


    # Config Files
    todo(".config files: Rofi, i3")
    todo("setup i3 to use better applications. Rofi/Firefox/Terminal")

    # To be able to watch youtube videos for example.
    todo("enable pulseaudio.")

    todo("setup .profile to startx upon login")
    todo("throw setxkbmap -option caps:swapescape in .xinitrc.")
    todo("setup .xinitrc to launch i3")

    todo("reboot()")


def configure() -> None:
    global config

    if config.graphics_driver: todo("setup_graphics_driver()")
    if config.reduce_memory  : todo("reduce_memory()")
    if config.mount_proc     : todo("mount_proc()")

    todo("setup mount.xfat for mounting vfat usb sticks.")
    todo("enable automount.")

    todo("setup ports and install a port manager.")
    todo("enable linux compatability: chapter 12.")

    return None

def configuration_prompts() -> None:
    global config

    config.graphics_driver = get_graphics_driver()
    config.reduce_memory   = ask_reduce_memory()
    config.mount_proc      = ask_mount_proc()
    config.setup_ports     = ask_setup_ports()
    config.linux_enable    = ask_linux_enable()
    todo("ask user if they would like to enable automount.")

def ask_linux_enable():
    prompt = "Would you like to enable Linux compatability?"
    return ask_loop_yes_no(prompt)

def get_graphics_driver() -> str:
    prompt = "Choose a graphics driver."
    return ask_loop_choice(prompt, 
                           "[Intel|amd|nvidia]", 
                           ["intel", "amd", "nvidia", ""], 
                           "intel")

def ask_setup_ports():
    prompt = "Would you like to setup ports?"
    return ask_loop_yes_no(prompt)

def ask_mount_proc() -> bool:
    prompt = "Would you mount 'proc'? This is used by some " \
          "Linux applications such as Gnome and KDE."
    return ask_loop_yes_no(prompt)

def ask_reduce_memory() -> bool:
    prompt = "Would you like to reduce the amount of memory FreeBSD " \
          "Allocates by default?"
    return ask_loop_yes_no(prompt, "n")

def ask_loop_yes_no(prompt: str, default: str = "y") -> bool:
    box = "[Y/n]"
    if default == "n": box = "[y/N]"
    prompt: str = f"{prompt} {box}: "
    return ask_loop(prompt, ["y", "n", ""], default)

def ask_loop_choice(prompt: str, box: str, choices: str, default: str) -> str:
    prompt = f"{prompt} {box}: "
    return ask_loop(prompt, choices, default)


def install_packages():
    run(r"pkg install --dry-run --yes $(cat packages.txt | tr '\n' ' ')")


def ask_loop(prompt: str, valid_answers: list[str], default_answer: str) -> bool | str:
    while True:
        choice: bool = input(prompt).lower()
        if choice == "": choice = default_answer

        if choice not in valid_answers:
            err_msg = f"Please choose one of the following: {valid_answers}"
            print(f"[error] {err_msg}")
            continue

        if choice == "y"  : return True
        elif choice == "n": return False
        elif choice == "" : return default_answer

        return choice

def run(cmd) -> None:
    print(cmd)
    os.system(cmd)
    return None

def error(msg) -> None:
    print(msg)
    exit(1)

def ensure_super_user() -> None:
    if is_super_user() is False:
        err_msg = "This script must be ran as a super user. "\
                  "Please run with either "                  \
                  "`doas` or `sudo`."
        error(err_msg)
    return None

def is_super_user() -> bool:
    return int(os.getuid()) == 0

def reboot():
    os.system("reboot")

def todo(msg):
    print(f"TODO: {msg}")

if __name__ == "__main__":
    main()
    #configuration_prompts()
    config.debug()
